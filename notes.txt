# Create seeder files
php artisan make:seeder ServiceCategorySeeder
php artisan make:seeder ProviderProfileSeeder
php artisan make:seeder ServiceSeeder
php artisan make:seeder AppointmentSeeder

# Run specific seeder
php artisan db:seed --class=ServiceCategorySeeder

# Run all seeders
php artisan db:seed

# Refresh database and seed
php artisan migrate:fresh --seed


# Create factory files
php artisan make:factory ServiceCategoryFactory
php artisan make:factory ProviderProfileFactory
php artisan make:factory ServiceFactory
php artisan make:factory ProviderAvailabilityFactory
php artisan make:factory AppointmentFactory


# Check migration status
php artisan migrate:status

# If migrations haven't been run, run them
php artisan migrate

# If you need to start fresh
php artisan migrate:fresh

# Try running migrations one by one
php artisan migrate --path=database/migrations/xxxx_xx_xx_create_service_categories_table.php
php artisan migrate --path=database/migrations/xxxx_xx_xx_create_provider_profiles_table.php

$ use tinker
php artisan tinker
use App\Models\ServiceCategory;
ServiceCategory::factory(5)->create();

# Artisan command for admin creation.
php artisan hireme:create-admin

# Non-Interactive Mode
php artisan hireme:create-admin \
  --email="admin@yourdomain.com" \
  --password="SecurePassword123!" \
  --first-name="Super" \
  --last-name="Admin"

# See log files
tail -f storage/logs/laravel.log

php artisan cache:clear && php artisan config:clear && php artisan route:clear

# xampp mysql error fix
Important**:** do not delete the ibdata1 file. You could destroy all your databases.

Instead, first try using the MySQL backup folder which is included with XAMPP. So do next steps:

Rename folder mysql/data to mysql/data_old
Make a copy of mysql/backup folder and name it as mysql/data
Copy all your database folders from mysql/data_old into mysql/data (except mysql, performance_schema, phpmyadmin,andtest folders)
Copy mysql/data_old/ibdata1 file into mysql/data folder
Start MySQL from XAMPP control panel
And, voilà!


# Stripe
# Check if it's working
stripe --version

# Login to your Stripe account
stripe login

# Start webhook forwarding for your Laravel app
stripe listen --forward-to localhost:8000/stripe/webhook

# Test webhook events
stripe trigger payment_intent.succeeded

# Check your account info
stripe config --list


# To Use in Your React Frontend:
const profilePicUrl = `${process.env.REACT_APP_API_URL}/storage/${user.profile_picture}`;

<img src={profilePicUrl} alt="Profile" />


php artisan queue:work   │
│    --daemon" && echo "" && echo "For now, let's test by processing just one job:" && timeout 5 php artisan queue:work --once     │
│   --timeout=5 || echo "No jobs in queue to process (this is expected)

 # In a separate terminal:
  php artisan queue:work --daemon --sleep=3 --tries=3 --timeout=90

# Notification before 24h
  # Manual execution
  php artisan appointments:send-reminders

  # Test mode
  php artisan appointments:send-reminders --dry-run

  # View scheduled tasks
  php artisan schedule:list

  # To run this seeder, you can add it to your DatabaseSeeder.php or run it directly with:
  php artisan db:seed --class=ClientSeeder






  
1. Provider AppointmentController.php (app/Http/Controllers/API/Provider/AppointmentController.php)

  - Lines around the validation check (commented out):
    - The main validation is commented out in the startService() method
    - canStartService() method has the 15-minute rule commented out: // $allowedStartTime = 
  $appointmentDateTime->copy()->subMinutes(15);

  2. Provider AppointmentDetail.jsx (resources/js/pages/provider/appointments/AppointmentDetail.jsx)

  - Multiple locations with commented 15-minute logic:
    - // const graceMinutes = 15; (commented out)
    - Functions for checking start time with 15-minute grace period are commented out

  3. AppointmentCard.jsx (resources/js/components/provider/appointments/AppointmentCard.jsx)

  - Active 15-minute rule implementation:
    - const graceMinutes = 15; - This is NOT commented out
    - Used in canStartService() and getTimeUntilStart() functions
    - Alert message: You can start this service in ${timeUntil} (15 minutes before scheduled time).

  4. TodaysSchedule.jsx (resources/js/pages/provider/appointments/TodaysSchedule.jsx)

  - Active 15-minute rule for appointment status:
    - isAppointmentNow() function checks if appointment is within 15 minutes
    - isAppointmentPast() function considers appointment past if more than 15 minutes ago
