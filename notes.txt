# Create seeder files
php artisan make:seeder ServiceCategorySeeder
php artisan make:seeder ProviderProfileSeeder
php artisan make:seeder ServiceSeeder
php artisan make:seeder AppointmentSeeder

# Run specific seeder
php artisan db:seed --class=ServiceCategorySeeder

# Run all seeders
php artisan db:seed

# Refresh database and seed
php artisan migrate:fresh --seed


# Create factory files
php artisan make:factory ServiceCategoryFactory
php artisan make:factory ProviderProfileFactory
php artisan make:factory ServiceFactory
php artisan make:factory ProviderAvailabilityFactory
php artisan make:factory AppointmentFactory


# Check migration status
php artisan migrate:status

# If migrations haven't been run, run them
php artisan migrate

# If you need to start fresh
php artisan migrate:fresh

# Try running migrations one by one
php artisan migrate --path=database/migrations/xxxx_xx_xx_create_service_categories_table.php
php artisan migrate --path=database/migrations/xxxx_xx_xx_create_provider_profiles_table.php

$ use tinker
php artisan tinker
use App\Models\ServiceCategory;
ServiceCategory::factory(5)->create();

# Artisan command for admin creation.
php artisan hireme:create-admin

# Non-Interactive Mode
php artisan hireme:create-admin \
  --email="admin@yourdomain.com" \
  --password="SecurePassword123!" \
  --first-name="Super" \
  --last-name="Admin"

# See log files
tail -f storage/logs/laravel.log

php artisan cache:clear && php artisan config:clear && php artisan route:clear

# xampp mysql error fix
Important**:** do not delete the ibdata1 file. You could destroy all your databases.

Instead, first try using the MySQL backup folder which is included with XAMPP. So do next steps:

Rename folder mysql/data to mysql/data_old
Make a copy of mysql/backup folder and name it as mysql/data
Copy all your database folders from mysql/data_old into mysql/data (except mysql, performance_schema, phpmyadmin,andtest folders)
Copy mysql/data_old/ibdata1 file into mysql/data folder
Start MySQL from XAMPP control panel
And, voilà!


# Stripe
# Check if it's working
stripe --version

# Login to your Stripe account
stripe login

# Start webhook forwarding for your Laravel app
stripe listen --forward-to localhost:8000/stripe/webhook

# Test webhook events
stripe trigger payment_intent.succeeded

# Check your account info
stripe config --list


# To Use in Your React Frontend:
const profilePicUrl = `${process.env.REACT_APP_API_URL}/storage/${user.profile_picture}`;

<img src={profilePicUrl} alt="Profile" />


php artisan queue:work   │
│    --daemon" && echo "" && echo "For now, let's test by processing just one job:" && timeout 5 php artisan queue:work --once     │
│   --timeout=5 || echo "No jobs in queue to process (this is expected)

 # In a separate terminal:
  php artisan queue:work --daemon --sleep=3 --tries=3 --timeout=90

# Notification before 24h
  # Manual execution
  php artisan appointments:send-reminders

  # Test mode
  php artisan appointments:send-reminders --dry-run

  # View scheduled tasks
  php artisan schedule:list

  # To run this seeder, you can add it to your DatabaseSeeder.php or run it directly with:
  php artisan db:seed --class=ClientSeeder


  Vite is a modern build tool and development server for frontend applications.
  When you run npm run dev, Vite starts the development server and makes your React components available.
  Vite makes your frontend development faster and your production builds more efficient.

  React is a JavaScript library for building user interfaces, especially web applications
  React creates the interactive user interface that your customers see and use, while Laravel handles the server-side logic and data management.

  Stripe is a payment processing platform that handles online payments for your HireMe application.
  Stripe handles all the complex payment processing so you don't have to deal with credit card data, security compliance, or banking integrations directly.

  Mailtrap is an email testing service that captures and displays emails sent from your application during development.
  Mailtrap lets you safely test all your email functionality without sending real emails to users, ensuring everything works perfectly before deployment.

  Haversine Formula calculates the shortest distance between two points on Earth's surface using latitude and longitude coordinates.
  The Haversine formula enables precise location-based matching between clients and service providers, making your platform more efficient by connecting people with nearby services.

  Reverse Geocoding converts geographic coordinates (latitude and longitude) into human-readable addresses or location names.
  Reverse geocoding makes your location-based features user-friendly by converting technical coordinates into meaningful place names that users can understand and relate to.
  OpenStreetMap Nominatim

  Leaflet is a lightweight, open-source JavaScript library for creating interactive maps in web applications.
  Leaflet provides the interactive mapping functionality for your HireMe platform, allowing users to visually see, select, and interact with service locations, making the location-based aspects of your app much more intuitive and user-friendly.

  Laravel Sanctum is a lightweight authentication system for SPAs (Single Page Applications), mobile applications, and simple token-based APIs.
  Sanctum handles all the authentication security between your React frontend and Laravel backend, ensuring only authenticated users can access protected features and API endpoints in your HireMe platform.
  


 A unique constraint was added using provider_id', 'appointment_date', 'appointment_time'], 'unique_provider_datetime' to prevent double booking



  
