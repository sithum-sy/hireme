import axios from "axios";\n\nconst API_BASE = "/api/provider";\n\nclass ProviderAppointmentService {\n    /**\n     * Get all provider appointments with filtering\n     */\n    async getAppointments(params = {}) {\n        try {\n            const response = await axios.get(`${API_BASE}/appointments`, {\n                params,\n            });\n            return {\n                success: true,\n                data: response.data.data || response.data,\n                message: "Appointments loaded successfully",\n            };\n        } catch (error) {\n            return this.handleError(error, "Failed to load appointments");\n        }\n    }\n\n    /**\n     * Get today's appointments\n     */\n    async getTodaysAppointments() {\n        try {\n            const response = await axios.get(`${API_BASE}/appointments/today`);\n            return {\n                success: true,\n                data: response.data.data || [],\n                message: "Today's appointments loaded",\n            };\n        } catch (error) {\n            return this.handleError(\n                error,\n                "Failed to load today's appointments"\n            );\n        }\n    }\n\n    /**\n     * Get appointment details\n     */\n    async getAppointmentDetail(appointmentId) {\n        try {\n            const response = await axios.get(\n                `${API_BASE}/appointments/${appointmentId}`\n            );\n            return {\n                success: true,\n                data: response.data.data,\n                message: "Appointment details loaded",\n            };\n        } catch (error) {\n            return this.handleError(\n                error,\n                "Failed to load appointment details"\n            );\n        }\n    }\n\n    /**\n     * Update appointment status\n     */\n    async updateAppointmentStatus(appointmentId, status, notes = "") {\n        try {\n            const response = await axios.patch(\n                `${API_BASE}/appointments/${appointmentId}/status`,\n                {\n                    status,\n                    notes,\n                }\n            );\n            return {\n                success: true,\n                data: response.data.data,\n                message: response.data.message || "Status updated successfully",\n            };\n        } catch (error) {\n            return this.handleError(\n                error,\n                "Failed to update appointment status"\n            );\n        }\n    }\n\n    /**\n     * Confirm appointment\n     */\n    async confirmAppointment(appointmentId, notes = "") {\n        return this.updateAppointmentStatus(appointmentId, "confirmed", notes);\n    }\n\n    /**\n     * Start service\n     */\n    async startService(appointmentId, notes = "") {\n        return this.updateAppointmentStatus(\n            appointmentId,\n            "in_progress",\n            notes\n        );\n    }\n\n    /**\n     * Complete service with invoice options\n     */\n    async completeService(appointmentId, options = {}) {\n        try {\n            const response = await axios.post(\n                `${API_BASE}/appointments/${appointmentId}/complete`,\n                {\n                    notes: options.notes || "",\n                    create_invoice: options.create_invoice !== false, // Default true\n                    send_invoice: options.send_invoice || false, // Default false\n                }\n            );\n\n            return {\n                success: true,\n                data: response.data.data,\n                invoice: response.data.invoice, // Include invoice data if created\n                message:\n                    response.data.message || "Service completed successfully",\n            };\n        } catch (error) {\n            return this.handleError(error, "Failed to complete service");\n        }\n    }\n\n    /**\n     * Cancel appointment\n     */\n    async cancelAppointment(appointmentId, reason = "") {\n        return this.updateAppointmentStatus(\n            appointmentId,\n            "cancelled_by_provider",\n            reason\n        );\n    }\n\n    /**\n     * Mark as no show\n     */\n    async markNoShow(appointmentId, notes = "") {\n        return this.updateAppointmentStatus(appointmentId, "no_show", notes);\n    }\n\n    /**\n     * Get pending reschedule requests\n     */\n    async getRescheduleRequests() {\n        try {\n            const response = await axios.get(`${API_BASE}/appointments/reschedule-requests`);\n            return {\n                success: true,\n                data: response.data.data || [],\n                message: "Reschedule requests loaded successfully",\n            };\n        } catch (error) {\n            return this.handleError(error, "Failed to load reschedule requests");\n        }\n    }\n\n    /**\n     * Respond to reschedule request\n     */\n    async respondToRescheduleRequest(appointmentId, action, reason = "") {\n        try {\n            const response = await axios.post(\n                `${API_BASE}/appointments/${appointmentId}/reschedule-response`,\n                {\n                    action, // 'accept' or 'decline'\n                    reason,\n                }\n            );\n            return {\n                success: true,\n                data: response.data.data,\n                message: response.data.message || "Reschedule request processed successfully",\n            };\n        } catch (error) {\n            return this.handleError(error, "Failed to respond to reschedule request");\n        }\n    }\n\n    /**\n     * Accept reschedule request\n     */\n    async acceptRescheduleRequest(appointmentId) {\n        return this.respondToRescheduleRequest(appointmentId, "accept");\n    }\n\n    /**\n     * Decline reschedule request\n     */\n    async declineRescheduleRequest(appointmentId, reason = "") {\n        return this.respondToRescheduleRequest(appointmentId, "decline", reason);\n    }\n\n    /**\n     * Error handler\n     */\n    handleError(error, defaultMessage) {\n        if (error.response) {\n            return {\n                success: false,\n                message: error.response.data?.message || defaultMessage,\n                errors: error.response.data?.errors || {},\n                status: error.response.status,\n            };\n        }\n        return {\n            success: false,\n            message: error.message || defaultMessage,\n            errors: {},\n        };\n    }\n\n    /**\n     * Get dashboard appointment data\n     */\n    async getDashboardAppointments() {\n        try {\n            const [\n                todayResult,\n                upcomingResult,\n                pastResult,\n                cancelledResult,\n                statsResult,\n            ] = await Promise.all([\n                axios.get(`${API_BASE}/appointments/dashboard/today`),\n                axios.get(`${API_BASE}/appointments/dashboard/upcoming`),\n                axios.get(`${API_BASE}/appointments/dashboard/past`),\n                axios.get(`${API_BASE}/appointments/dashboard/cancelled`),\n                axios.get(`${API_BASE}/appointments/dashboard/stats`),\n            ]);\n\n            return {\n                success: true,\n                data: {\n                    today: todayResult.data.data || [],\n                    upcoming: upcomingResult.data.data || [],\n                    past: pastResult.data.data || [],\n                    cancelled: cancelledResult.data.data || [],\n                    stats: statsResult.data.data || {},\n                },\n            };\n        } catch (error) {\n            return this.handleError(\n                error,\n                "Failed to load dashboard appointments"\n            );\n        }\n    }\n\n    /**\n     * Get today's appointments for dashboard\n     */\n    async getTodayAppointmentsForDashboard() {\n        try {\n            const response = await axios.get(\n                `${API_BASE}/appointments/dashboard/today`\n            );\n            return {\n                success: true,\n                data: response.data.data || [],\n            };\n        } catch (error) {\n            return this.handleError(\n                error,\n                "Failed to load today's appointments"\n            );\n        }\n    }\n\n    /**\n     * Get upcoming appointments for dashboard\n     */\n    async getUpcomingAppointmentsForDashboard() {\n        try {\n            const response = await axios.get(\n                `${API_BASE}/appointments/dashboard/upcoming`\n            );\n            return {\n                success: true,\n                data: response.data.data || [],\n            };\n        } catch (error) {\n            return this.handleError(\n                error,\n                "Failed to load upcoming appointments"\n            );\n        }\n    }\n\n    /**\n     * Get past appointments for dashboard\n     */\n    async getPastAppointmentsForDashboard() {\n        try {\n            const response = await axios.get(\n                `${API_BASE}/appointments/dashboard/past`\n            );\n            return {\n                success: true,\n                data: response.data.data || [],\n            };\n        } catch (error) {\n            return this.handleError(error, "Failed to load past appointments");\n        }\n    }\n\n    /**\n     * Get cancelled appointments for dashboard\n     */\n    async getCancelledAppointmentsForDashboard() {\n        try {\n            const response = await axios.get(\n                `${API_BASE}/appointments/dashboard/cancelled`\n            );\n            return {\n                success: true,\n                data: response.data.data || [],\n            };\n        } catch (error) {\n            return this.handleError(\n                error,\n                "Failed to load cancelled appointments"\n            );\n        }\n    }\n\n    /**\n     * Get appointment stats for dashboard\n     */\n    async getAppointmentStats() {\n        try {\n            const response = await axios.get(\n                `${API_BASE}/appointments/dashboard/stats`\n            );\n            return {\n                success: true,\n                data: response.data.data || {},\n            };\n        } catch (error) {\n            return this.handleError(error, "Failed to load appointment stats");\n        }\n    }\n}\n\nexport default new ProviderAppointmentService();